<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Error_AFactoryObjectDuplicateID" xml:space="preserve">
    <value>Setting ID to AFactoryObject with existing ID '{0}' is not allowed!</value>
  </data>
  <data name="Error_ArrayMismatchException" xml:space="preserve">
    <value>Attempted operation between two arrays of different length.</value>
  </data>
  <data name="Error_ArrayMismatchException_length_length" xml:space="preserve">
    <value>Attempted operation between two arrays of different lengths '{0}' and '{1}'.</value>
  </data>
  <data name="Error_ArrayMismatchException_length_type" xml:space="preserve">
    <value>Attempted assignment of an array of length {0} to {1}.</value>
  </data>
  <data name="Error_CacheKeyNotFound" xml:space="preserve">
    <value>Attempted to get an non-existent key '{0}' from a cache.</value>
  </data>
  <data name="Error_CapacityExceededException" xml:space="preserve">
    <value>Attempted to push an item into {0} that has reached capacity limit of {1}.</value>
  </data>
  <data name="Error_CollectionAddDuplicateKey" xml:space="preserve">
    <value>Attempted to add an existing key '{0}' to a {1}.</value>
  </data>
  <data name="Error_CollectionAddNullKey" xml:space="preserve">
    <value>Attempted to add a null key to a {0}.</value>
  </data>
  <data name="Error_CollectionPutNullKey" xml:space="preserve">
    <value>Attempted to put value of a null key in a {0}.</value>
  </data>
  <data name="Error_CollectionSetKeyNotFound" xml:space="preserve">
    <value>Attempted to set value to an non-existent key '{0}' in a {1}.</value>
  </data>
  <data name="Error_CollectionSetNullKey" xml:space="preserve">
    <value>Attempted to set value of a null key to a {0}.</value>
  </data>
  <data name="Error_DuplicateINISection" xml:space="preserve">
    <value>Invalid duplicate section [{0}] detected.</value>
  </data>
  <data name="Error_ExpectedEnumException" xml:space="preserve">
    <value>Type '{0}' is not an enum.</value>
  </data>
  <data name="Error_FileNotFound" xml:space="preserve">
    <value>The file {0} is not found!</value>
  </data>
  <data name="Error_INIFileAttributeNotFound" xml:space="preserve">
    <value>The attribute does not exist!</value>
  </data>
  <data name="Error_INIKeyListInvalidType" xml:space="preserve">
    <value>INIKeyList attribute can only be used with string[] data types! ({0})</value>
  </data>
  <data name="Error_INIKeyNotFound" xml:space="preserve">
    <value>The key '{0}' in section '{1}' is not defined!</value>
  </data>
  <data name="Error_INIRegistryListInvalidType" xml:space="preserve">
    <value>INIRegistry attribute can only be used with Registry&lt;K,T&gt; data types! ({0})</value>
  </data>
  <data name="Error_INISectionNotFound" xml:space="preserve">
    <value>The section '{0}' is not defined!</value>
  </data>
  <data name="Error_INISubSectionKeyListInvalidType" xml:space="preserve">
    <value>INISubSectionKeyListAttribute attribute can only be used with a single-level array (T[]) data type! ({0})</value>
  </data>
  <data name="Error_INISubSectionListInvalidType" xml:space="preserve">
    <value>INISubSectionListAttribute attribute can only be used with a single-level array (T[]) data type! ({0})</value>
  </data>
  <data name="Error_InvalidIndex" xml:space="preserve">
    <value>Attempted to access invalid index '{0}' of {1}.</value>
  </data>
  <data name="Error_InvalidStateCommandException" xml:space="preserve">
    <value>Command '{0}' is not valid on state '{1}'</value>
  </data>
  <data name="Error_ObjectPoolBackgroundPoolNotCreated" xml:space="preserve">
    <value>The background object pool for '{0}' has not been created.</value>
  </data>
  <data name="Error_ObjectPoolDuplicateBackgroundPool" xml:space="preserve">
    <value>There is already a background object pool for '{0}'</value>
  </data>
  <data name="Error_ObjectPoolDuplicateItem" xml:space="preserve">
    <value>The object to be admitted into the pool '{0}' already exists in the pool!</value>
  </data>
  <data name="Error_RuleConversionException" xml:space="preserve">
    <value>Attempted to parse invalid value '{0}' as {1}.</value>
  </data>
  <data name="Error_UnsupportedParseException" xml:space="preserve">
    <value>Attempted to parse a string from an unsupported type '{0}'.</value>
  </data>
  <data name="Error_UnsupportedWriteException" xml:space="preserve">
    <value>Attempted to write a string from an unsupported type '{0}'.</value>
  </data>
</root>
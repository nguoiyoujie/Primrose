bool g_b = true;
int g_i = 10;
float g_f = 0.4;
string g_s = "test";

int[] g_a1 = new int[3];
float[,][] g_a2 = new float[1,1][];
string[,,,][,][] g_a3 = new string[1,2,3,4][,][];

globals:
	Assert.AreEqual(g_b, true);
	Assert.AreEqual(g_i, 10);
	Assert.AreEqual(g_f, 0.4);
	Assert.AreEqual(g_s, "test");


math_uops:
	Assert.AreEqual(2 - 6.3, -4.3);


math_bops:
	Assert.AreEqual(1 + 1, 2);
	Assert.AreEqual(2 - 3, -1);
	Assert.AreEqual(4 * 5.2, 20.8);
	Assert.AreEqual(10 / 0.25, 40.0);
	Assert.AreEqual(10 % 3, 1);
	Assert.AreEqual(2 * (4 + 5), 18);
	Assert.AreEqual(3 - (6 - 2 / 2), -2);
	Assert.AreEqual(((2 + 2) * (1.0 / 2)) - ((2 + 2) / (2 / 2)), -2);

	float2 f1 = new float2(3, 14);
	float2 f2 = new float2(4, -5);
	Assert.AreEqual(f1 + f2, new float2(7, 9));


math_tops:
	int x = 4;
	Assert.AreEqual((x > 2) ? x * 2 : x / 2, 8);
	x = 1;
	Assert.AreEqual((x > 2) ? x * 2 : x / 2, 0);
	float	y = 1;
	Assert.AreEqual((y > 2) ? y * 2 : y / 2, 0.5);


cmp:
	int x = 10;
	Assert.AreEqual(x > 5, true);
	Assert.AreEqual(x > 10, false);
	Assert.AreEqual(x > 12, false);

	Assert.AreEqual(x < 6, false);
	Assert.AreEqual(x < 8, false);
	Assert.AreEqual(x < 11, true);

	Assert.AreEqual(x > -x, true);

	Assert.AreEqual(x >= 7, true);
	Assert.AreEqual(x >= 10, true);
	Assert.AreEqual(x >= 13, false);

	Assert.AreEqual(x <= 3, false);
	Assert.AreEqual(x <= 10, true);
	Assert.AreEqual(x <= 19, true);


if:
	int x = 100;
	if (x >= 10)
		x = 50;
	Assert.AreEqual(x, 50);

	if (x >= 10)
		x = -1;
	else
		x = 10;
	Assert.AreEqual(x, -1);
	
	if (x >= 10)
		x = -1;
	else
		x = 10;
	Assert.AreEqual(x, 10);


while:
	float n = 0.1;
	int i = 1;

	while (i < 20)
	{
		n += 0.1;
		i += 1;
	}
	Assert.AreEqual(n, 2);


for:
	float n = 0.5;
	for (int i = 0; i < 5; i += 1)
	{
		n += i;
	}
	Assert.AreEqual(n, 10.5);

	string s = "s";
	for (int i = 4; i < 8; i += 1)
	{
		s += i;
	}
	Assert.AreEqual(s, "s4567");


foreach:
	float n = 0.4;
	foreach (int i in {2,5,7})
	{
		n *= i;
	}
	Assert.AreEqual(n, 28);


array:
	float[] a = new float[]{1,2,3.5};
	//a[0] = 1;
	//a[1] = 2;
	//a[2] = 3.5;
	Assert.AreEqual(a[0], 1);
	Assert.AreEqual(a[1], 2);
	Assert.AreEqual(a[2], 3.5);

	float[,][] b = new float[2,2][];
	b[0,0] = new float[1];
	b[0,1] = new float[2];
	b[1,0] = new float[3];
	b[1,1] = new float[4];
	
	b[0,0][0] = -1; 
	b[0,1][1] = 1; 
	b[1,0][2] = 2; 
	b[1,1][0] = b[0,0][0]; 
	b[1,1][1] = b[0,1][1]; 
	b[1,1][2] = b[1,0][2]; 
	b[1,1][3] = b[1,1][2]; 

	Assert.AreEqual(b[1,1][0], -1);
	Assert.AreEqual(b[1,1][1], 1);
	Assert.AreEqual(b[1,1][2], 2);
	Assert.AreEqual(b[1,1][3], 2);

	int[,,] c = new int[,,] { { { 1, 2, 3 }, { 4, 5, 6 } }, { { 7, 8, 9 }, { 10, 11, 12 } } };
	int sum = 0;
	foreach (int i in c)
	{
		sum += i;
	}
	Assert.AreEqual(sum, 78);

vectors:
	float2 v2 = {-1, -2}; 
	Assert.AreEqual(v2[0], -1);
	Assert.AreEqual(v2[1], -2);

	float2 v2b = {10, 10};
	v2b += v2 * 2;
	v2b -= {1, 1};
	Assert.AreEqual(v2b[0], 7);
	Assert.AreEqual(v2b[1], 5);

